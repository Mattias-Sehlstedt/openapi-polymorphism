/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package polymorphism.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import polymorphism.model.ExplicitTypeSellRequestDTO;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ExplicitTypePercentageRequestDTO
 */
@JsonPropertyOrder({
  ExplicitTypePercentageRequestDTO.JSON_PROPERTY_PERCENTAGE
})
@JsonTypeName("ExplicitTypePercentageRequest")
@lombok.experimental.SuperBuilder
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-14T11:19:01.680047700+02:00[Europe/Stockholm]", comments = "Generator version: 7.13.0")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class ExplicitTypePercentageRequestDTO extends ExplicitTypeSellRequestDTO implements SellRequestDTO {
  public static final String JSON_PROPERTY_PERCENTAGE = "percentage";
  @jakarta.annotation.Nonnull
  private BigDecimal percentage;

  public ExplicitTypePercentageRequestDTO() {

  }

  public ExplicitTypePercentageRequestDTO percentage(@jakarta.annotation.Nonnull BigDecimal percentage) {
    
    this.percentage = percentage;
    return this;
  }

  /**
   * The percentage to sell
   * @return percentage
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getPercentage() {
    return percentage;
  }


  @JsonProperty(JSON_PROPERTY_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPercentage(@jakarta.annotation.Nonnull BigDecimal percentage) {
    this.percentage = percentage;
  }


  @Override
  public ExplicitTypePercentageRequestDTO type(@jakarta.annotation.Nonnull String type) {
    this.setType(type);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplicitTypePercentageRequestDTO explicitTypePercentageRequest = (ExplicitTypePercentageRequestDTO) o;
    return Objects.equals(this.percentage, explicitTypePercentageRequest.percentage) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentage, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplicitTypePercentageRequestDTO {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

